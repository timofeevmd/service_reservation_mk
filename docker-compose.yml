version: '3.8'

networks:
    monitor:
        driver: bridge
        name: service_reservation_monitor

services:
  backend:
    image: michaelt1223/perf_sr_backend:latest
    container_name: backend
    restart: always
    platform: ${PLATFORM}
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1g"
        reservations:
          cpus: "0.2"
          memory: "512m"
    environment:
      SERVER_PORT: 8080
      SPRING_FLYWAY_ENABLED: "true"
      SPRING_FLYWAY_SCHEMAS: public
      SPRING_FLYWAY_DEFAULT_SCHEMA: public
      SPRING_FLYWAY_LOCATIONS: filesystem:/app/db/migration
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/postgres
      SPRING_DATASOURCE_USERNAME: test_user
      SPRING_DATASOURCE_PASSWORD: qwe123
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_SCHEMA: public
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_OPEN_IN_VIEW: "false"
      JWT_SECRET: go1uazZR0e8fIQJIG6x2KBtjEHpDeMNvP/DDhy1uWd69Dv1L2jlJ55RfOVuEChjLj4l1gdRuTyCcwFkmTpKlew==
      JWT_EXPIRATION: 86400000
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "prometheus"
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: "true"
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
      SPRING_OUTPUT_ANSI_ENABLED: "always"
      LOGGING_PATTERN_CONSOLE: "%d{yyyy-MM-dd HH:mm:ss} [%p] %c{1} - %m%n"
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_COM_SERVICE: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: INFO
      SPRING_JPA_SHOW_SQL: "true"
      LOGGING_LEVEL_ORG_HIBERNATE_SQL: INFO
      LOGGING_LEVEL_ORG_HIBERNATE_TYPE_DESCRIPTOR_SQL_BASICBINDER: INFO
      LOGGING_FILE_NAME: logs/application.log
      LOGGING_FILE_MAX_SIZE: 10MB
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB_CLIENT_RESTTEMPLATE: INFO
      MANAGEMENT_ENDPOINT_LOGGERS_ENABLED: "true"
      MANAGEMENT_ENDPOINT_METRICS_ENABLED: "true"
    extra_hosts:
      - "127.0.0.1.nip.io:host-gateway"
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - ${NETWORKS}

  frontend:
    image: michaelt1223/perf_sr_frontend:latest
    container_name: frontend
    restart: always
    platform: ${PLATFORM}
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "512g"
        reservations:
          cpus: "0.2"
          memory: "256m"
    extra_hosts:
      - "127.0.0.1.nip.io:host-gateway"
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - ${NETWORKS}

  database:
    image: postgres:latest
    container_name: database
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "1g"
        reservations:
          cpus: "0.1"
          memory: "512m"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U test_user -d postgres" ]
      interval: 10s
      retries: 5
    command: [ "postgres", "-c", "log_statement=all" ]
    networks:
      - ${NETWORKS}

volumes:
  db_data: